{"ast":null,"code":"import { getApiUrl } from '../config/api';\nclass ApiService {\n  async uploadDocument(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch(getApiUrl('/documents/upload'), {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('API Response:', data); // Debug log\n\n      if (!data || !data.results) {\n        throw new Error('Invalid response format from server');\n      }\n      return data;\n    } catch (error) {\n      console.error('Error uploading document:', error);\n      throw error;\n    }\n  }\n  async getCompanyConfig() {\n    try {\n      const response = await fetch(getApiUrl('/config/company'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Company Config:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching company config:', error);\n      throw error;\n    }\n  }\n  async getComplianceRules() {\n    try {\n      const response = await fetch(getApiUrl('/config/rules'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Compliance Rules:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching compliance rules:', error);\n      throw error;\n    }\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["getApiUrl","ApiService","uploadDocument","file","formData","FormData","append","response","fetch","method","body","headers","ok","errorData","json","catch","Error","detail","status","data","console","log","results","error","getCompanyConfig","getComplianceRules","apiService"],"sources":["/Users/abhishek.vats/Documents/Projects Git/Projects/docintel-ai/frontend/src/services/api.js"],"sourcesContent":["import { getApiUrl } from '../config/api';\n\nclass ApiService {\n  async uploadDocument(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch(getApiUrl('/documents/upload'), {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response:', data); // Debug log\n\n      if (!data || !data.results) {\n        throw new Error('Invalid response format from server');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error uploading document:', error);\n      throw error;\n    }\n  }\n\n  async getCompanyConfig() {\n    try {\n      const response = await fetch(getApiUrl('/config/company'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Company Config:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching company config:', error);\n      throw error;\n    }\n  }\n\n  async getComplianceRules() {\n    try {\n      const response = await fetch(getApiUrl('/config/rules'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Compliance Rules:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching compliance rules:', error);\n      throw error;\n    }\n  }\n}\n\nconst apiService = new ApiService();\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}