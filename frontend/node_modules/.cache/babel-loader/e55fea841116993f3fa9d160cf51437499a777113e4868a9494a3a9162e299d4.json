{"ast":null,"code":"import { getApiUrl } from '../config/api';\nclass ApiService {\n  async uploadDocument(file) {\n    try {\n      console.log('Starting document upload...');\n      console.log('File:', file);\n      console.log('File type:', file.type);\n      console.log('File size:', file.size);\n      const formData = new FormData();\n      formData.append('file', file);\n      const url = getApiUrl('/documents/upload');\n      console.log('Upload URL:', url);\n      const response = await fetch(url, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Response error:', errorData);\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('API Response:', data); // Debug log\n\n      // Validate the response structure\n      if (!data || typeof data !== 'object') {\n        throw new Error('Invalid response format from server');\n      }\n\n      // Return the data in the expected format\n      return {\n        results: {\n          summary: data.summary,\n          entities: data.entities,\n          compliance_report: data.compliance_report,\n          clause_traceability: data.clause_traceability\n        }\n      };\n    } catch (error) {\n      console.error('Error uploading document:', error);\n      console.error('Error name:', error.name);\n      console.error('Error message:', error.message);\n      console.error('Error stack:', error.stack);\n      throw error;\n    }\n  }\n  async getCompanyConfig() {\n    try {\n      const response = await fetch(getApiUrl('/config/company'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Company Config:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching company config:', error);\n      throw error;\n    }\n  }\n  async getComplianceRules() {\n    try {\n      const response = await fetch(getApiUrl('/config/rules'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Compliance Rules:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching compliance rules:', error);\n      throw error;\n    }\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["getApiUrl","ApiService","uploadDocument","file","console","log","type","size","formData","FormData","append","url","response","fetch","method","body","headers","status","ok","errorData","json","catch","error","Error","detail","data","results","summary","entities","compliance_report","clause_traceability","name","message","stack","getCompanyConfig","getComplianceRules","apiService"],"sources":["/Users/abhishek.vats/Documents/Projects Git/Projects/docintel-ai copy 2/frontend/src/services/api.js"],"sourcesContent":["import { getApiUrl } from '../config/api';\n\nclass ApiService {\n  async uploadDocument(file) {\n    try {\n      console.log('Starting document upload...');\n      console.log('File:', file);\n      console.log('File type:', file.type);\n      console.log('File size:', file.size);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n\n      const url = getApiUrl('/documents/upload');\n      console.log('Upload URL:', url);\n\n      const response = await fetch(url, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Response error:', errorData);\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response:', data); // Debug log\n\n      // Validate the response structure\n      if (!data || typeof data !== 'object') {\n        throw new Error('Invalid response format from server');\n      }\n\n      // Return the data in the expected format\n      return {\n        results: {\n          summary: data.summary,\n          entities: data.entities,\n          compliance_report: data.compliance_report,\n          clause_traceability: data.clause_traceability\n        }\n      };\n    } catch (error) {\n      console.error('Error uploading document:', error);\n      console.error('Error name:', error.name);\n      console.error('Error message:', error.message);\n      console.error('Error stack:', error.stack);\n      throw error;\n    }\n  }\n\n  async getCompanyConfig() {\n    try {\n      const response = await fetch(getApiUrl('/config/company'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Company Config:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching company config:', error);\n      throw error;\n    }\n  }\n\n  async getComplianceRules() {\n    try {\n      const response = await fetch(getApiUrl('/config/rules'), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Compliance Rules:', data); // Debug log\n      return data;\n    } catch (error) {\n      console.error('Error fetching compliance rules:', error);\n      throw error;\n    }\n  }\n}\n\nconst apiService = new ApiService();\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}